use io::*;
use std::*;
use std::cmp::max;

fn solve(N: i64, M: i64, K: i64, A: Vec<i64>, B: Vec<i64>) {
    let mut desk_a = Desk::new(A);
    let mut desk_b = Desk::new(B);
    let mut time = init(&mut desk_a, &mut desk_b, K);
    let mut n_read = desk_a.read + desk_b.read;
    loop {
        match desk_a.prev() {
            Some(t) => {
                time -= t;
                time -= desk_b.read_as_possible(time);
                n_read = max(n_read, desk_a.read + desk_b.read);
            }
            None => break
        }
    }
    println!("{}", n_read)
}

fn init(a: &mut Desk, b: &mut Desk, rest_time: i64) -> i64 {
    let rest_time = rest_time - a.read_as_possible(rest_time);
    rest_time - b.read_as_possible(rest_time)
}

struct Desk {
    books: Vec<i64>,
    read: usize,
}

impl Desk {
    pub fn new(books: Vec<i64>) -> Desk {
        Desk{
            books,
            read: 0,
        }
    }

    pub fn next(&mut self) -> Option<i64> {
        if self.read == self.books.len() {
            None
        } else {
            self.read += 1;
            Some(self.books[self.read - 1])
        }
    }

    pub fn prev(&mut self) -> Option<i64> {
        if self.read == 0 {
            None
        } else {
            self.read -= 1;
            Some(-self.books[self.read])
        }
    }

    pub fn read_as_possible(&mut self, rest_time: i64) -> i64 {
        let mut total_time = 0;
        loop {
            match self.next() {
                Some(t) if (t + total_time) <= rest_time => total_time += t,
                Some(_) => {
                    self.prev();
                    break
                }
                None => break
            }
        }
        total_time
    }
}

// Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
fn main() {
    let con = read_string();
    let mut scanner = Scanner::new(&con);
    let mut N: i64;
    N = scanner.next();
    let mut M: i64;
    M = scanner.next();
    let mut K: i64;
    K = scanner.next();
    let mut A: Vec<i64> = vec![0i64; (N) as usize];
    for i in 0..(N) as usize {
        A[i] = scanner.next();
    }
    let mut B: Vec<i64> = vec![0i64; (M) as usize];
    for i in 0..(M) as usize {
        B[i] = scanner.next();
    }
    // In order to avoid potential stack overflow, spawn a new thread.
    let stack_size = 104_857_600; // 100 MB
    let thd = std::thread::Builder::new().stack_size(stack_size);
    thd.spawn(move || solve(N, M, K, A, B)).unwrap().join().unwrap();
}

pub mod io {
    use std;
    use std::str::FromStr;

    pub struct Scanner<'a> {
        iter: std::str::SplitWhitespace<'a>,
    }

    impl<'a> Scanner<'a> {
        pub fn new(s: &'a str) -> Scanner<'a> {
            Scanner {
                iter: s.split_whitespace(),
            }
        }

        pub fn next<T: FromStr>(&mut self) -> T {
            let s = self.iter.next().unwrap();
            if let Ok(v) = s.parse::<T>() {
                v
            } else {
                panic!("Parse error")
            }
        }

        pub fn next_vec_len<T: FromStr>(&mut self) -> Vec<T> {
            let n: usize = self.next();
            self.next_vec(n)
        }

        pub fn next_vec<T: FromStr>(&mut self, n: usize) -> Vec<T> {
            (0..n).map(|_| self.next()).collect()
        }
    }

    pub fn read_string() -> String {
        use std::io::Read;

        let mut s = String::new();
        std::io::stdin().read_to_string(&mut s).unwrap();
        s
    }

    pub fn read_line() -> String {
        let mut s = String::new();
        std::io::stdin().read_line(&mut s).unwrap();
        s.trim_right().to_owned()
    }
}
